#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Function to return precedence of operators
int prec(char c) {
   if (c == '/' || c == '*')
        return 2;
    else if (c == '+' || c == '-')
       return 1;
    else
       return -1;
}
void printfStack(int stack[], int stackIndex)
{
    while (stackIndex >= 0)
    {
        printf("%d ", stack[stackIndex]);
        stackIndex--;
    }
    printf("\n");
}
void PostfixtoResult(char Postfix[], int PostfixSize)
{
    int stack[1000];
    int stackIndex = -1;
    int PostfixIndex = 0;
    while (PostfixIndex < PostfixSize)
    {
        char c = Postfix[PostfixIndex];
        if (c >= '0' && c <= '9') 
        {
            stack[++stackIndex] = (c - 48);
        }
        else 
        {
            if (c == '+') 
            {
                stack[stackIndex - 1] = stack[stackIndex - 1] +  stack[stackIndex];
                stackIndex--;
            }
            else if (c == '-')
            {
                stack[stackIndex - 1] = stack[stackIndex - 1] -  stack[stackIndex];
                stackIndex--;
            }
            else if (c == '*')
            {
                stack[stackIndex - 1] = stack[stackIndex - 1] *  stack[stackIndex];
                stackIndex--;
            }
            else 
            {
                stack[stackIndex - 1] = stack[stackIndex - 1] /  stack[stackIndex];
                stackIndex--;
            }
        }
        PostfixIndex++;
        //printfStack(stack,stackIndex);
    }
    printf("%d",stack[0]);
}
void infixToPostfix(char s[]) {
    char Postfix[1000];
    int PostfixIndex = 0;
    int len = strlen(s);
    char stack[1000];
    int stackIndex = -1;

    for (int i = 0; i < len; i++) {
        char c = s[i];

        if ((c >= '0' && c <= '9')) {
           Postfix[PostfixIndex++] = c;
        }
        else if (c == '(') {
            stack[++stackIndex] = c;
        }
        else if (c == ')') {
            while (stackIndex >= 0 && stack[stackIndex] != '(') {
                Postfix[PostfixIndex++] = stack[stackIndex--];
            }
            stackIndex--; 
        }
        else {
            while (stackIndex >= 0 && prec(s[i]) <= prec(stack[stackIndex]))
                Postfix[PostfixIndex++] = stack[stackIndex--];
            stack[++stackIndex] = c;
        }
    }


    while (stackIndex >= 0) {
        Postfix[PostfixIndex++] = stack[stackIndex--];
    }

   printf("%s\n", Postfix);
    PostfixtoResult(Postfix,PostfixIndex);
}


int main() {
    char exp[] = "1-3*5+6/2";
   infixToPostfix(exp);

    return 0;
}
